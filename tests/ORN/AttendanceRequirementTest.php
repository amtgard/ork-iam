<?php

namespace Tests\Amtgard\IAM\ORN;

use Amtgard\IAM\ORN\Definitions\AttendanceClaim;
use Amtgard\IAM\ORN\Definitions\AttendanceRequirement;
use Amtgard\IAM\ORN\Definitions\OrkClaim;
use Amtgard\IAM\OrkService;
use Amtgard\IAM\Proviso\Condition;
use Amtgard\IAM\Proviso\Proviso;
use InvalidArgumentException;
use Phake;
use PHPUnit\Framework\TestCase;

class AttendanceRequirementTest extends TestCase
{
    private AttendanceRequirement $requirement;
    private static String $ATTENDANCE_ORN = "Attendance:1:2:3:4:5:6:ORK/AddAttendance";
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->requirement = new AttendanceRequirement(OrkService::Attendance, self::$ATTENDANCE_ORN);

        $claim = Phake::mock(AttendanceClaim::class);
        Phake::when($claim)->getServe->thenReturn(OrkService::Attendance);
        $configurationGrant = Phake::mock(Proviso::class);
        Phake::when($configurationGrant)->getService->thenReturn(OrkService::Configuration);
        $gameGrant = Phake::mock(Proviso::class);
        Phake::when($gameGrant)->getService->thenReturn(OrkService::Game);
        $kingdomGrant = Phake::mock(Proviso::class);
        Phake::when($kingdomGrant)->getService->thenReturn(OrkService::Kingdom);
        $parkGrant = Phake::mock(Proviso::class);
        Phake::when($parkGrant)->getService->thenReturn(OrkService::Park);
        $eventGrant = Phake::mock(Proviso::class);
        Phake::when($eventGrant)->getService->thenReturn(OrkService::Event);
        $instanceGrant = Phake::mock(Proviso::class);
        Phake::when($instanceGrant)->getService->thenReturn(OrkService::EventInstance);
        Phake::when($claim)->getProvisos()->thenReturn([
            OrkService::Configuration->name => $configurationGrant,
            OrkService::Game->name => $gameGrant,
            OrkService::Kingdom->name => $kingdomGrant,
            OrkService::Park->name => $parkGrant,
            OrkService::Event->name => $eventGrant,
            OrkService::EventInstance->name => $instanceGrant,
        ]);
    }

    public function testConstructor() {
        self::assertEquals($this->requirement->getService(), OrkService::Attendance);
        self::assertEquals((new Condition(OrkService::Event, "5")), $this->requirement->getProviso(OrkService::Event));
    }

    public function testWhenProvisoIsGlob_thenThrows() {
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage("Invalid orn format.");
        new AttendanceRequirement(OrkService::Attendance, "Attendance:1:2:*:4:5::ORK/AddAttendance");
    }

    public function testAllowsExact() {
        self::assertTrue($this->requirement->allows(new AttendanceClaim(OrkService::Attendance, self::$ATTENDANCE_ORN)));
    }

    public function testWhenOneMatch_thenAllow() {
        $oneMatchOrn = "Attendance::8:::5::ORK/AddAttendance";
        self::assertTrue($this->requirement->allows(new AttendanceClaim(OrkService::Attendance, $oneMatchOrn)));
    }

    public function testWhenRequirement_hasEmptySlots_thenReject() {
        $requirement = new AttendanceRequirement(OrkService::Attendance, "Attendance:1:2:3:4:5::ORK/AddAttendance");
        $noMatchOrn = "Attendance::8:::::ORK/AddAttendance";
        self::assertFalse($requirement->allows(new AttendanceClaim(OrkService::Attendance, $noMatchOrn)));
    }

    public function testWhenNoMatch_thenReject() {
        $noMatchOrn = "Attendance::8:::::ORK/AddAttendance";
        self::assertFalse($this->requirement->allows(new AttendanceClaim(OrkService::Attendance, $noMatchOrn)));
    }

    public function testWhenOneMatch_andResourceGlob_thenAllow() {
        $oneMatchOrn = "Attendance:::::5::*";
        self::assertTrue($this->requirement->allows(new AttendanceClaim(OrkService::Attendance, $oneMatchOrn)));
    }

    public function testWhenOneMatch_andProcedureGlob_thenAllow() {
        $oneMatchOrn = "Attendance:::::5::ORK/*";
        self::assertTrue($this->requirement->allows(new AttendanceClaim(OrkService::Attendance, $oneMatchOrn)));
    }

    public function testBuildOrnReturnsInputString() {
        self::assertEquals(self::$ATTENDANCE_ORN, $this->requirement->buildOrn());
    }

    public function testWhenInvalidOrn_thenThrows() {
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage("Invalid orn format.");
        new AttendanceRequirement(OrkService::Attendance, "not_an_orn");
    }

    public function testWhenAlmostValidOrn_thenThrows() {
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage("Invalid orn format.");
        new AttendanceRequirement(OrkService::Attendance, "Attendance:1:two:3:4:5::ORK/AddAttendance");
    }

    public function testWhenInvalidResource_thenThrows() {
        new AttendanceRequirement(OrkService::Attendance, "Attendance:1::3:4:5::ORK/AddAttendance");
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage("Invalid resource definition.");
        new AttendanceRequirement(OrkService::Attendance, "Attendance:1::3:4:5::ORK/AddAttendances");
    }

    public function testWhenInvalidProvisos_thenThrows() {
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage("Invalid proviso set.");
        new AttendanceRequirement(OrkService::Attendance, "Attendance:1::3:4::ORK/AddAttendance");
    }

    public function testWhenServiceDoesNotMatch_thenNotAllowed() {
        $wrongService = "ORK::8:::5:ORK/AddKingdom";
        self::assertFalse($this->requirement->allows(new OrkClaim(OrkService::ORK, $wrongService)));
    }
}